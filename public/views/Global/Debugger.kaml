<rbl-config></rbl-config>

<style>
/* Link Style */
/* Button Style */
{thisClass} .btn-primary,
{thisClass} .btn-danger,
{thisClass} .btn-default,
{thisClass} .btn-success,
{thisClass} .btn-info,
{thisClass} .btn-warning {
  -webkit-border-radius: 6px;
  -moz-border-radius: 6px;
  border-radius: 6px;
}
{thisClass} .btn-xs {
  -webkit-border-radius: 4px;
  -moz-border-radius: 4px;
  border-radius: 4px;
}

{thisClass} .rbl-logclass {
  padding: 0 20px;
  margin-bottom: 20px;
  border: solid 1px black;
  max-height: 160px;
  overflow-y: auto;
}

{thisClass} .toast {
  position: fixed;
  bottom: 5px;
  left: 2%;
  width: 50%;
  margin: 0 25% 0 25%;
  z-index: 999;
}
</style>

<div class="s">
    <div class="alert alert-info toast" style="display:none;" role="alert"></div>
</div>

<div class="rbl-nocalc">
    <div class="row">
        <div class="col-sm-12">
            <h3 class="mb-3">Options</h3>
        </div>
    </div>
    <div class="row">
        <div class="form-group vCurrentApp col-sm-6">
            <label for="CurrentApp" class="control-label">Current Application</label>
            <select name="CurrentApp" id="CurrentApp" class="form-control bootstrap-select show-tick CurrentApp" tabindex="-98">
                <option value="Custom" selected="true">Custom View</option>
                <option value="DST:Disability">DST - Disability</option>
                <option value="DST:DevROI">DST - Dependent Eligibility Verification Savings Estimator</option>
                <option value="DST:FSA">DST - FSA Tax Savings Calculator</option>
                <option value="DST:FWA">DST - Financial Wellness Modeler</option>
                <option value="DST:HSAErSavings">DST - Employer Savings from Employee pre-tax HSA contributions</option>
                <option value="DST:HSALimit">DST - HSA Contribution Limit Calculator</option>
                <option value="DST:HSATax">DST - HSA Tax Savings</option>
                <option value="DST:IRP">DST - Income Replacement Percentage (IRP) Calculator</option>
                <option value="DST:LifeInputs">DST - Life Insurance Calculator</option>
            </select>
        </div>
        <div class="form-group vCustomView col-sm-6">
            <label for="" class="control-label lCustomView">Custom View</label>
            <div class="validator-container">
                <input name="CustomView" id="CustomView" type="text" placeholder="Folder:View, i.e. DST:FSA" class="form-control CustomView">
                <span class="error-msg" data-toggle="tooltip" data-placement="top"></span>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="form-group vKatAppSelector col-sm-6">
            <label for="" class="control-label lKatAppSelector">KatApp Selector To Override</label>
            <div class="validator-container">
                <input name="KatAppSelector" id="KatAppSelector" type="text" value=".KatApp" placeholder="i.e. .KatApp" class="form-control KatAppSelector">
                <span class="error-msg" data-toggle="tooltip" data-placement="top"></span>
            </div>
        </div>
        <div class="form-group vDataAttributes col-sm-6">
            <label for="" class="control-label lDataAttributes">Data Attributes To Apply...</label>
            <div class="validator-container">
                <input name="DataAttributes" id="DataAttributes" type="text" class="form-control DataAttributes">
                <span class="error-msg" data-toggle="tooltip" data-placement="top"></span>
            </div>
        </div>
        <div class="form-group vSaveCalcEngineLocation col-sm-6">
            <label for="" class="control-label lSaveCalcEngineLocation">Save Next Calculation To...</label>
            <div class="validator-container">
                <div class="input-group">
                    <input name="SaveCalcEngineLocation" id="SaveCalcEngineLocation" type="text" class="form-control SaveCalcEngineLocation">
                    <span class="input-group-btn">
                        <a class="btn btn-primary lnkSaveCalcEngine">Save</a>
                    </span>
                </div>
                <span class="error-msg" data-toggle="tooltip" data-placement="top"></span>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-4">
            <div class="validator-container checkbox-container vUseTestPlugin">
                <span class="checkbox abc-checkbox UseTestPlugin lUseTestPlugin">
                    <input id="UseTestPlugin" type="checkbox" name="UseTestPlugin">
                    <label for="UseTestPlugin">Use test PlugIn version</label>
                </span>
            </div>
            <div class="validator-container checkbox-container vUseTestView">
                <span class="checkbox abc-checkbox UseTestView lUseTestView">
                    <input id="UseTestView" type="checkbox" name="UseTestView">
                    <label for="UseTestView">Use test View/Template versions</label>
                </span>
            </div>
        </div>
        <div class="col-sm-4">
            <div class="validator-container checkbox-container vUseTestCalcEngine">
                <span class="checkbox abc-checkbox UseTestCalcEngine lUseTestCalcEngine">
                    <input id="UseTestCalcEngine" type="checkbox" name="UseTestCalcEngine">
                    <label for="UseTestCalcEngine">Use test CalcEngine</label>
                </span>
            </div>
            <div class="validator-container checkbox-container vUseLocalFiles">
                <span class="checkbox abc-checkbox UseLocalFiles lUseLocalFiles">
                    <input id="UseLocalFiles" type="checkbox" name="UseLocalFiles">
                    <label for="UseLocalFiles">Use local View/Template files</label>
                </span>
            </div>
        </div>
        <div class="col-sm-12" style="padding-top: 10px;">
            <a class="btn btn-primary UpdateDebugOptions">Update</a>
            <a class="btn btn-primary LogResults">Log Calculation Info</a>
            <a class="btn btn-primary ConfigureUI">ConfigureUI Calculation</a>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-6" style="padding-top: 15px;">
            <div class="form-group vtraceLevel">
                <label for="traceLevel" class="control-label">Trace Verbosity</span> <a href="#" onclick="$('.rbl-logclass').empty();return false;">clear</a></label>
                <select name="traceLevel" id="traceLevel" class="form-control bootstrap-select show-tick traceLevel" tabindex="-98">
                    <option value="0" selected="true">None</option>
                    <option value="1">Quiet</option>
                    <option value="2">Minimal</option>
                    <option value="3">Normal</option>
                    <option value="4">Detailed</option>
                    <option value="5">Diagnostic</option>             
                </select>
            </div>
        </div>
        <div class="col-sm-12">
            <div class="rbl-logclass"></div>                    
        </div>
    </div>
</div>

<script>
    (function() {
        const view = $("{thisView}");

        if ( KatApp.pageParameters[ "debugkatapp"] === "1" ) {
            debugger;
        }

        view.on( "onInitialized.RBLe", function( event, application ) {
            const selectPickerAvailable = typeof $.fn.selectpicker === "function";

            if ( selectPickerAvailable ) {
                $(".bootstrap-select", view).selectpicker();
            }

            $(".KatAppSelector").val($(view).data("selector"));

            $("select.CurrentApp", view).change(function() {
                if ( $(this).val() === "Custom" ) {
                    $(".vCustomView", view).show();
                }
                else {
                    $(".vCustomView", view).hide();
                }
            }).trigger("change");

            const getSelector = function() {
                return $(".KatAppSelector", view).val() || "[rbl-application-id]"; // Default to all katapps on page;
            }

            $("#traceLevel", view).change( function() {
                $(getSelector()).KatApp("updateOptions", { debug: { traceVerbosity: Number($("#traceLevel").val()) } });
            });
            
            $(".SaveCalcEngineLocation", view).bind("keyup.RBLe", function (e) {
                var keycode = (e.keyCode ? e.keyCode : e.which);
                if (keycode == 13) {
                    e.preventDefault();
                    $(".lnkSaveCalcEngine", view).trigger("click");
                }
            });
        
            $(".lnkSaveCalcEngine", view).click(function() {
                const location = $(".SaveCalcEngineLocation", view).val();

                if ( location !== "" ) {
                    $(getSelector()).KatApp("saveCalcEngine", location);
                    $(".SaveCalcEngineLocation", view).val("");

                    $(".toast", view).html("<p><b>Save Next CalcEngine...</b></p><p>Next calculation will be saved to " + location + " secure file location.</p>").slideDown();
                    window.setTimeout(function() {
                        $(".toast").slideUp();
                    }, 2500);
                }
            })

            $(".ConfigureUI", view).click( function() {
                $(getSelector()).KatApp("configureUI");
            });

            $(".LogResults", view).click( function () {
                $(getSelector()).each(function() {
                    const application = $(this).KatApp();

                    console.group("Application " + application.displayId + " Results");
                    console.log(application.results);
                    console.groupEnd("Application " + application.displayId + " Results");
                    console.group("Application " + application.displayId + " Inputs");
                    console.log(application.calculationInputs);
                    console.groupEnd("Application " + application.displayId + " Inputs");
                });
            });

            $(".UpdateDebugOptions", view).click(function() {
                const selector = getSelector();

                var initialSaveLocation = $(".SaveCalcEngineLocation", view).val() || "";
                $(".SaveCalcEngineLocation", view).val("");

                let currentView = $("#CurrentApp", view).val();
                let calcEngine = undefined;

                if ( currentView === "Custom" ) {
                    currentView = $(".CustomView", view).val() || "";
                    const viewParts = currentView.split("|");
                    if ( viewParts.length === 2 ) {
                        currentView = viewParts[ 0 ];
                        calcEngine = viewParts[ 1 ];
                    }
                }

                const debugOptions = { 
                    saveFirstCalculationLocation: initialSaveLocation !== "" ? initialSaveLocation : undefined,
                    refreshCalcEngine: true,
                    traceVerbosity: Number($("#traceLevel").val()),
                    useTestView: $("#UseTestView").prop("checked"),
                    useTestPlugin: $("#UseTestPlugin").prop("checked"),
                    useTestCalcEngine: $("#UseTestCalcEngine").prop("checked"),
                    debugResourcesDomain: $("#UseLocalFiles").prop("checked") ? "http://localhost:8887/" /* start at root of site */ : undefined,
                };
                KatApp.defaultOptions = KatApp.extend( KatApp.defaultOptions, { debug: debugOptions, functionUrl: KatApp.functionUrl } );

                if ( currentView !== "" ) {
                    $(selector).KatApp("destroy"); // wouldn't need this usually on client site, but I'm going to reload/execute provider script so wanted everything destroyed
                    if ( typeof $.fn.selectpicker === "function" ) {
                        $(selector + " select.bootstrap-select").selectpicker("destroy");
                    }

                    var dataAttributes = $(".DataAttributes", view).val() || "";

                    $(selector).removeData().each(function() {
                        // get the native attributes object
                        var attrs = this.attributes;
                        var toRemove = [];

                        // iterate the attributes
                        for (attr in attrs) {
                            if ( typeof attrs[attr].name === 'string' && (/^data-/).test(attrs[attr].name) ) {
                                toRemove.push(attrs[attr].name);
                            }
                        }

                        // cache the jquery object containing the element for better performance
                        var element = $(this);
                        for (var i = 0; i < toRemove.length; i++) {
                            element.removeAttr(toRemove[i]);
                        }
                    });                

                    if ( dataAttributes !== "" ) {
                        dataAttributes.split(",").forEach( function( a ) {
                            const attrs = a.trim().split("=");
                            $(selector).attr("data-" + attrs[ 0 ], attrs[ 1 ]);
                        });
                    }

                    $(".DataAttributes", view).val("");
                    
                    const options = KatApp.extend( {}, KatApp.defaultOptions, { 
                        view: currentView,
                        calcEngine: calcEngine
                    } );

                    // This is deleted each time the 'real' Provider js runs, so rebuild it and reset factory to shim factory
                    $.fn.KatApp.plugInShims = [];
                    $.fn.KatApp.applicationFactory = $.fn.KatApp.debugApplicationFactory;
                    $("rbl-katapps").empty(); // remove templates
                    $.fn.KatApp.templatesUsedByAllApps = {};
                    $.fn.KatApp.templateDelegates = [];

                    $(".logo-left").html("KatApp Test Harness: " + $("#CurrentApp option:selected").text());
                    $(selector).attr("rbl-trace-id", $("#CurrentApp").val().split(":")[1]).KatApp(options);
                }
                else {
                    $(selector).KatApp("updateOptions", { debug: debugOptions });
                }
            });

            $("#UseLocalFiles", view).prop("checked", KatApp.pageParameters[ "localdebugger"] === "1")
            $("#UseTestView", view).prop("checked", KatApp.pageParameters[ "testview"] === "1")
            $("#UseTestPlugin", view).prop("checked", KatApp.pageParameters[ "testplugin"] === "1")
            $("#UseTestCalcEngine", view).prop("checked", KatApp.pageParameters[ "test"] === "1")

            KatApp.defaultOptions.debug.refreshCalcEngine = true;
            KatApp.defaultOptions.debug.traceVerbosity = Number($("#traceLevel").val());
            
            if ( $("#UseLocalFiles", view).prop("checked") ) {
                KatApp.defaultOptions.debug.debugResourcesDomain = "http://localhost:8887/";
            }
        });
    })();
    //# sourceURL=Debugger.kaml
</script>